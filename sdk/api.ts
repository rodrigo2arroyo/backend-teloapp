/* tslint:disable */
/* eslint-disable */
/**
 * TeloApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
    /**
     * 
     * @type {number}
     * @memberof ContactResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContactResponse
     */
    'countryCode'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateContact
 */
export interface CreateContact {
    /**
     * 
     * @type {number}
     * @memberof CreateContact
     */
    'hotelId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateContact
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateContact
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateContact
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateContact
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateContact
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateContact
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateContact
     */
    'createdBy'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateHotel
 */
export interface CreateHotel {
    /**
     * 
     * @type {string}
     * @memberof CreateHotel
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateHotel
     */
    'description'?: string | null;
    /**
     * 
     * @type {LocationRequest}
     * @memberof CreateHotel
     */
    'location'?: LocationRequest;
    /**
     * 
     * @type {string}
     * @memberof CreateHotel
     */
    'createdBy'?: string | null;
}
/**
 * 
 * @export
 * @interface CreatePromotion
 */
export interface CreatePromotion {
    /**
     * 
     * @type {number}
     * @memberof CreatePromotion
     */
    'hotelId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePromotion
     */
    'rateType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatePromotion
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreatePromotion
     */
    'duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreatePromotion
     */
    'promotionalPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreatePromotion
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatePromotion
     */
    'endDate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreatePromotion
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreatePromotion
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreatePromotion
     */
    'serviceIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface CreateRate
 */
export interface CreateRate {
    /**
     * 
     * @type {number}
     * @memberof CreateRate
     */
    'hotelId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateRate
     */
    'rateType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateRate
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateRate
     */
    'duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateRate
     */
    'price'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateRate
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateRate
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateRate
     */
    'serviceIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface CreateReview
 */
export interface CreateReview {
    /**
     * 
     * @type {number}
     * @memberof CreateReview
     */
    'hotelId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateReview
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateReview
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateReview
     */
    'author'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateReview
     */
    'createdBy'?: string | null;
}
/**
 * 
 * @export
 * @interface HotelResponse
 */
export interface HotelResponse {
    /**
     * 
     * @type {number}
     * @memberof HotelResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HotelResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HotelResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {LocationResponse}
     * @memberof HotelResponse
     */
    'location'?: LocationResponse;
    /**
     * 
     * @type {Array<RateResponse>}
     * @memberof HotelResponse
     */
    'rates'?: Array<RateResponse> | null;
    /**
     * 
     * @type {Array<PromotionResponse>}
     * @memberof HotelResponse
     */
    'promotions'?: Array<PromotionResponse> | null;
    /**
     * 
     * @type {Array<ReviewResponse>}
     * @memberof HotelResponse
     */
    'reviews'?: Array<ReviewResponse> | null;
    /**
     * 
     * @type {Array<ContactResponse>}
     * @memberof HotelResponse
     */
    'contacts'?: Array<ContactResponse> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof HotelResponse
     */
    'images'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface HotelsResult
 */
export interface HotelsResult {
    /**
     * Lista de hoteles disponibles
     * @type {Array<HotelResponse>}
     * @memberof HotelsResult
     */
    'hotels'?: Array<HotelResponse> | null;
    /**
     * NÃºmero total de hoteles
     * @type {number}
     * @memberof HotelsResult
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface LocationRequest
 */
export interface LocationRequest {
    /**
     * 
     * @type {number}
     * @memberof LocationRequest
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationRequest
     */
    'longitude'?: number;
}
/**
 * 
 * @export
 * @interface LocationResponse
 */
export interface LocationResponse {
    /**
     * 
     * @type {string}
     * @memberof LocationResponse
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationResponse
     */
    'district'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocationResponse
     */
    'street'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LocationResponse
     */
    'latitude'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LocationResponse
     */
    'longitude'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof LocationResponse
     */
    'distanceKm'?: number | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface PromotionResponse
 */
export interface PromotionResponse {
    /**
     * 
     * @type {number}
     * @memberof PromotionResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionResponse
     */
    'rateType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionResponse
     */
    'promotionalPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionResponse
     */
    'duration'?: number;
    /**
     * 
     * @type {Array<ServiceResponse>}
     * @memberof PromotionResponse
     */
    'services'?: Array<ServiceResponse> | null;
}
/**
 * 
 * @export
 * @interface RateResponse
 */
export interface RateResponse {
    /**
     * 
     * @type {number}
     * @memberof RateResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RateResponse
     */
    'rateType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RateResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RateResponse
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof RateResponse
     */
    'duration'?: number;
    /**
     * 
     * @type {Array<ServiceResponse>}
     * @memberof RateResponse
     */
    'services'?: Array<ServiceResponse> | null;
}
/**
 * 
 * @export
 * @interface ReviewResponse
 */
export interface ReviewResponse {
    /**
     * 
     * @type {number}
     * @memberof ReviewResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponse
     */
    'author'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ReviewResponse
     */
    'rating'?: number;
}
/**
 * 
 * @export
 * @interface ServiceResponse
 */
export interface ServiceResponse {
    /**
     * 
     * @type {number}
     * @memberof ServiceResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceResponse
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateContact
 */
export interface UpdateContact {
    /**
     * 
     * @type {number}
     * @memberof UpdateContact
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateContact
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContact
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContact
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContact
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContact
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContact
     */
    'updatedBy'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateHotel
 */
export interface UpdateHotel {
    /**
     * 
     * @type {number}
     * @memberof UpdateHotel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateHotel
     */
    'name'?: string | null;
    /**
     * 
     * @type {LocationResponse}
     * @memberof UpdateHotel
     */
    'location'?: LocationResponse;
    /**
     * 
     * @type {string}
     * @memberof UpdateHotel
     */
    'updatedBy'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdatePromotion
 */
export interface UpdatePromotion {
    /**
     * 
     * @type {number}
     * @memberof UpdatePromotion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdatePromotion
     */
    'rateType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePromotion
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePromotion
     */
    'duration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePromotion
     */
    'promotionalPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePromotion
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePromotion
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdatePromotion
     */
    'status'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UpdatePromotion
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdatePromotion
     */
    'serviceIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface UpdateRate
 */
export interface UpdateRate {
    /**
     * 
     * @type {number}
     * @memberof UpdateRate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateRate
     */
    'rateType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateRate
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateRate
     */
    'duration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateRate
     */
    'price'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateRate
     */
    'status'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateRate
     */
    'updatedBy'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateRate
     */
    'serviceIds'?: Array<number> | null;
}

/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateContact} [createContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact: async (createContact?: CreateContact, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createContact, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact: async (contactId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactId' is not null or undefined
            assertParamExists('deleteContact', 'contactId', contactId)
            const localVarPath = `/api/Contact/{contactId}`
                .replace(`{${"contactId"}}`, encodeURIComponent(String(contactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateContact} [updateContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (updateContact?: UpdateContact, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateContact, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateContact} [createContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(createContact?: CreateContact, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContact(createContact, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.createContact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContact(contactId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContact(contactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.deleteContact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateContact} [updateContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(updateContact?: UpdateContact, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContact(updateContact, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.updateContact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateContact} [createContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact(createContact?: CreateContact, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createContact(createContact, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} contactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact(contactId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteContact(contactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateContact} [updateContact] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact(updateContact?: UpdateContact, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateContact(updateContact, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * 
     * @param {CreateContact} [createContact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public createContact(createContact?: CreateContact, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).createContact(createContact, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} contactId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public deleteContact(contactId: number, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).deleteContact(contactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateContact} [updateContact] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public updateContact(updateContact?: UpdateContact, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).updateContact(updateContact, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HotelApi - axios parameter creator
 * @export
 */
export const HotelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateHotel} [createHotel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHotel: async (createHotel?: CreateHotel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHotel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelById: async (hotelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('getHotelById', 'hotelId', hotelId)
            const localVarPath = `/api/Hotel/{hotelId}`
                .replace(`{${"hotelId"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelImages: async (hotelId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('getHotelImages', 'hotelId', hotelId)
            const localVarPath = `/api/Hotel/{hotelId}/images`
                .replace(`{${"hotelId"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [names] 
         * @param {Array<string>} [cities] 
         * @param {Array<string>} [districts] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [userLatitude] 
         * @param {number} [userLongitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHotels: async (names?: Array<string>, cities?: Array<string>, districts?: Array<string>, minPrice?: number, maxPrice?: number, pageNumber?: number, pageSize?: number, userLatitude?: number, userLongitude?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (names) {
                localVarQueryParameter['Names'] = names;
            }

            if (cities) {
                localVarQueryParameter['Cities'] = cities;
            }

            if (districts) {
                localVarQueryParameter['Districts'] = districts;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['MinPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['MaxPrice'] = maxPrice;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['PageSize'] = pageSize;
            }

            if (userLatitude !== undefined) {
                localVarQueryParameter['UserLatitude'] = userLatitude;
            }

            if (userLongitude !== undefined) {
                localVarQueryParameter['UserLongitude'] = userLongitude;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateHotel} [updateHotel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHotel: async (updateHotel?: UpdateHotel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHotel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHotelImages: async (hotelId: number, files?: Array<File>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hotelId' is not null or undefined
            assertParamExists('uploadHotelImages', 'hotelId', hotelId)
            const localVarPath = `/api/Hotel/{hotelId}/upload-images`
                .replace(`{${"hotelId"}}`, encodeURIComponent(String(hotelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelApi - functional programming interface
 * @export
 */
export const HotelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HotelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateHotel} [createHotel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHotel(createHotel?: CreateHotel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHotel(createHotel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HotelApi.createHotel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotelById(hotelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotelById(hotelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HotelApi.getHotelById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotelImages(hotelId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotelImages(hotelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HotelApi.getHotelImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} [names] 
         * @param {Array<string>} [cities] 
         * @param {Array<string>} [districts] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [userLatitude] 
         * @param {number} [userLongitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHotels(names?: Array<string>, cities?: Array<string>, districts?: Array<string>, minPrice?: number, maxPrice?: number, pageNumber?: number, pageSize?: number, userLatitude?: number, userLongitude?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HotelsResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHotels(names, cities, districts, minPrice, maxPrice, pageNumber, pageSize, userLatitude, userLongitude, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HotelApi.listHotels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateHotel} [updateHotel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHotel(updateHotel?: UpdateHotel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHotel(updateHotel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HotelApi.updateHotel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadHotelImages(hotelId: number, files?: Array<File>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadHotelImages(hotelId, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HotelApi.uploadHotelImages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HotelApi - factory interface
 * @export
 */
export const HotelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HotelApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateHotel} [createHotel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHotel(createHotel?: CreateHotel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createHotel(createHotel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelById(hotelId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getHotelById(hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelImages(hotelId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getHotelImages(hotelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<string>} [names] 
         * @param {Array<string>} [cities] 
         * @param {Array<string>} [districts] 
         * @param {number} [minPrice] 
         * @param {number} [maxPrice] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {number} [userLatitude] 
         * @param {number} [userLongitude] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHotels(names?: Array<string>, cities?: Array<string>, districts?: Array<string>, minPrice?: number, maxPrice?: number, pageNumber?: number, pageSize?: number, userLatitude?: number, userLongitude?: number, options?: RawAxiosRequestConfig): AxiosPromise<HotelsResult> {
            return localVarFp.listHotels(names, cities, districts, minPrice, maxPrice, pageNumber, pageSize, userLatitude, userLongitude, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateHotel} [updateHotel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHotel(updateHotel?: UpdateHotel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateHotel(updateHotel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} hotelId 
         * @param {Array<File>} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadHotelImages(hotelId: number, files?: Array<File>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadHotelImages(hotelId, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HotelApi - object-oriented interface
 * @export
 * @class HotelApi
 * @extends {BaseAPI}
 */
export class HotelApi extends BaseAPI {
    /**
     * 
     * @param {CreateHotel} [createHotel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public createHotel(createHotel?: CreateHotel, options?: RawAxiosRequestConfig) {
        return HotelApiFp(this.configuration).createHotel(createHotel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} hotelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public getHotelById(hotelId: number, options?: RawAxiosRequestConfig) {
        return HotelApiFp(this.configuration).getHotelById(hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} hotelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public getHotelImages(hotelId: number, options?: RawAxiosRequestConfig) {
        return HotelApiFp(this.configuration).getHotelImages(hotelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<string>} [names] 
     * @param {Array<string>} [cities] 
     * @param {Array<string>} [districts] 
     * @param {number} [minPrice] 
     * @param {number} [maxPrice] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {number} [userLatitude] 
     * @param {number} [userLongitude] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public listHotels(names?: Array<string>, cities?: Array<string>, districts?: Array<string>, minPrice?: number, maxPrice?: number, pageNumber?: number, pageSize?: number, userLatitude?: number, userLongitude?: number, options?: RawAxiosRequestConfig) {
        return HotelApiFp(this.configuration).listHotels(names, cities, districts, minPrice, maxPrice, pageNumber, pageSize, userLatitude, userLongitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateHotel} [updateHotel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public updateHotel(updateHotel?: UpdateHotel, options?: RawAxiosRequestConfig) {
        return HotelApiFp(this.configuration).updateHotel(updateHotel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} hotelId 
     * @param {Array<File>} [files] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelApi
     */
    public uploadHotelImages(hotelId: number, files?: Array<File>, options?: RawAxiosRequestConfig) {
        return HotelApiFp(this.configuration).uploadHotelImages(hotelId, files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePromotion} [createPromotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromotion: async (createPromotion?: CreatePromotion, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Promotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPromotion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePromotion} [updatePromotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromotion: async (updatePromotion?: UpdatePromotion, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Promotion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePromotion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePromotion} [createPromotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPromotion(createPromotion?: CreatePromotion, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPromotion(createPromotion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.createPromotion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdatePromotion} [updatePromotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePromotion(updatePromotion?: UpdatePromotion, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePromotion(updatePromotion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.updatePromotion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePromotion} [createPromotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromotion(createPromotion?: CreatePromotion, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPromotion(createPromotion, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePromotion} [updatePromotion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromotion(updatePromotion?: UpdatePromotion, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePromotion(updatePromotion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     * 
     * @param {CreatePromotion} [createPromotion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public createPromotion(createPromotion?: CreatePromotion, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).createPromotion(createPromotion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePromotion} [updatePromotion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public updatePromotion(updatePromotion?: UpdatePromotion, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).updatePromotion(updatePromotion, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RateApi - axios parameter creator
 * @export
 */
export const RateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateRate} [createRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRate: async (createRate?: CreateRate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateRate} [updateRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRate: async (updateRate?: UpdateRate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RateApi - functional programming interface
 * @export
 */
export const RateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateRate} [createRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRate(createRate?: CreateRate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRate(createRate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RateApi.createRate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateRate} [updateRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRate(updateRate?: UpdateRate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRate(updateRate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RateApi.updateRate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RateApi - factory interface
 * @export
 */
export const RateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RateApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateRate} [createRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRate(createRate?: CreateRate, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createRate(createRate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateRate} [updateRate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRate(updateRate?: UpdateRate, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRate(updateRate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RateApi - object-oriented interface
 * @export
 * @class RateApi
 * @extends {BaseAPI}
 */
export class RateApi extends BaseAPI {
    /**
     * 
     * @param {CreateRate} [createRate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    public createRate(createRate?: CreateRate, options?: RawAxiosRequestConfig) {
        return RateApiFp(this.configuration).createRate(createRate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateRate} [updateRate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RateApi
     */
    public updateRate(updateRate?: UpdateRate, options?: RawAxiosRequestConfig) {
        return RateApiFp(this.configuration).updateRate(updateRate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateReview} [createReview] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReview: async (createReview?: CreateReview, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createReview, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview: async (reviewId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            assertParamExists('deleteReview', 'reviewId', reviewId)
            const localVarPath = `/api/Review/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateReview} [createReview] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReview(createReview?: CreateReview, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReview(createReview, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.createReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReview(reviewId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReview(reviewId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewApi.deleteReview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateReview} [createReview] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReview(createReview?: CreateReview, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createReview(createReview, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview(reviewId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteReview(reviewId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
    /**
     * 
     * @param {CreateReview} [createReview] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public createReview(createReview?: CreateReview, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).createReview(createReview, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public deleteReview(reviewId: number, options?: RawAxiosRequestConfig) {
        return ReviewApiFp(this.configuration).deleteReview(reviewId, options).then((request) => request(this.axios, this.basePath));
    }
}



