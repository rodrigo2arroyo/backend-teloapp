/* tslint:disable */
/* eslint-disable */
/**
 * TeloApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Transshipment
 */
export interface Transshipment {
    /**
     * 
     * @type {string}
     * @memberof Transshipment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transshipment
     */
    'shipmentId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Transshipment
     */
    'status'?: string | null;
}
/**
 * 
 * @export
 * @interface TransshipmentDto
 */
export interface TransshipmentDto {
    /**
     * 
     * @type {string}
     * @memberof TransshipmentDto
     */
    'shipmentId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransshipmentDto
     */
    'status'?: string | null;
}

/**
 * TransshipmentApi - axios parameter creator
 * @export
 */
export const TransshipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TransshipmentDto} [transshipmentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transshipmentCreateTransshipment: async (transshipmentDto?: TransshipmentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Transshipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transshipmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transshipmentGetAllTransshipments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Transshipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transshipmentSelectTrans: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transshipmentSelectTrans', 'id', id)
            const localVarPath = `/api/Transshipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransshipmentApi - functional programming interface
 * @export
 */
export const TransshipmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransshipmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TransshipmentDto} [transshipmentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transshipmentCreateTransshipment(transshipmentDto?: TransshipmentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transshipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transshipmentCreateTransshipment(transshipmentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransshipmentApi.transshipmentCreateTransshipment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transshipmentGetAllTransshipments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transshipment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transshipmentGetAllTransshipments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransshipmentApi.transshipmentGetAllTransshipments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transshipmentSelectTrans(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transshipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transshipmentSelectTrans(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransshipmentApi.transshipmentSelectTrans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransshipmentApi - factory interface
 * @export
 */
export const TransshipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransshipmentApiFp(configuration)
    return {
        /**
         * 
         * @param {TransshipmentDto} [transshipmentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transshipmentCreateTransshipment(transshipmentDto?: TransshipmentDto, options?: RawAxiosRequestConfig): AxiosPromise<Transshipment> {
            return localVarFp.transshipmentCreateTransshipment(transshipmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transshipmentGetAllTransshipments(options?: RawAxiosRequestConfig): AxiosPromise<Array<Transshipment>> {
            return localVarFp.transshipmentGetAllTransshipments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transshipmentSelectTrans(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Transshipment> {
            return localVarFp.transshipmentSelectTrans(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransshipmentApi - object-oriented interface
 * @export
 * @class TransshipmentApi
 * @extends {BaseAPI}
 */
export class TransshipmentApi extends BaseAPI {
    /**
     * 
     * @param {TransshipmentDto} [transshipmentDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransshipmentApi
     */
    public transshipmentCreateTransshipment(transshipmentDto?: TransshipmentDto, options?: RawAxiosRequestConfig) {
        return TransshipmentApiFp(this.configuration).transshipmentCreateTransshipment(transshipmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransshipmentApi
     */
    public transshipmentGetAllTransshipments(options?: RawAxiosRequestConfig) {
        return TransshipmentApiFp(this.configuration).transshipmentGetAllTransshipments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransshipmentApi
     */
    public transshipmentSelectTrans(id: string, options?: RawAxiosRequestConfig) {
        return TransshipmentApiFp(this.configuration).transshipmentSelectTrans(id, options).then((request) => request(this.axios, this.basePath));
    }
}



